#!/usr/bin/env python3

import sys, traceback


"""
Testing Python-style expression order

m_expr ::=  u_expr | m_expr "*" u_expr | m_expr "/" u_expr;
u_expr ::=  power | "-" u_expr | "+" u_expr;
power ::=  atom ["**" u_expr];
"""


LBP_ADDSUB                      = 10
LBP_MULDIV                      = 20
LBP_U_EXPR                      = 30
LBP_POWER                       = 40
LBP_MAX                         = 1000
LBP_MIN                         = -1000


class ParseError(ValueError):
    pass


class Token:
    lbp = 0

    def nud(self, parser):
        raise ParseError("not implemented: {}.nud".format(self.__class__))

    def led(self, parser):
        raise ParseError("not implemented: {}.led".format(self.__class__))


class Eoi(Token):
    pass


class Constant(Token):
    lbp = LBP_MAX
    value = None

    def __init__(self, v):
        self.value = v

    def nud(self, _parser):
        return self.value


class Plus(Token):
    lbp = LBP_ADDSUB

    def nud(self, parser):
        return parser.parse(LBP_U_EXPR - 1)

    def led(self, parser, v):
        return v + parser.parse(LBP_ADDSUB)


class Minus(Token):
    lbp = LBP_ADDSUB

    def nud(self, parser):
        return -parser.parse(LBP_U_EXPR - 1)

    def led(self, parser, v):
        return v - parser.parse(LBP_ADDSUB)


class Star(Token):
    lbp = LBP_MULDIV

    def led(self, parser, v):
        return v * parser.parse(LBP_U_EXPR - 1)


class Slash(Token):
    lbp = LBP_MULDIV

    def led(self, parser, v):
        return v / parser.parse(LBP_U_EXPR - 1)


class DoubleStar(Token):
    lbp = LBP_POWER

    def led(self, parser, v):
        return v ** parser.parse(LBP_U_EXPR - 1)


class LeftParen(Token):
    lbp = LBP_MAX

    def nud(self, parser):
        v = parser.parse(0)
        parser.lexer.advance(RightParen)
        return v


class RightParen(Token):
    lbp = LBP_MIN


class Lexer:
    itext = None
    ilen = None
    ipos = None
    curr_token = None

    def __init__(self, itext):
        self.itext = itext
        self.ilen = len(itext)
        self.ipos = 0

    def prepare(self):
        if self.curr_token is not None:
            return
        while self.ipos < self.ilen and self.itext[self.ipos] == ' ':
            self.ipos += 1
        if self.ipos >= self.ilen:
            self.curr_token = Eoi()
            return
        cchr = self.itext[self.ipos]
        if cchr == '+':
            self.curr_token = Plus()
            self.ipos += 1
            return
        if cchr == '-':
            self.curr_token = Minus()
            self.ipos += 1
            return
        if cchr == '*':
            if self.itext[self.ipos:self.ipos+2] == '**':
                self.curr_token = DoubleStar()
                self.ipos += 2
                return
            self.curr_token = Star()
            self.ipos += 1
            return
        if cchr == '/':
            self.curr_token = Slash()
            self.ipos += 1
            return
        if cchr == '(':
            self.curr_token = LeftParen()
            self.ipos += 1
            return
        if cchr == ')':
            self.curr_token = RightParen()
            self.ipos += 1
            return
        if '0' <= cchr <= '9':
            xpos = self.ipos + 1
            while xpos < self.ilen and '0' <= self.itext[xpos] <= '9':
                xpos += 1
            self.curr_token = Constant(int(self.itext[self.ipos:xpos], 10))
            self.ipos = xpos
            return
        raise ParseError("Unlexerable rest: {}".format(self.itext[self.ipos:]))

    def advance(self, expected = None):
        if expected is not None and not isinstance(self.curr_token, expected):
            raise ParseError("Lexer.advance: want {!r}, see {!r}".format(expected, self.curr_token))
        self.curr_token = None
        self.prepare()


class Parser:
    lexer = None

    def parse(self, rbp):
        t = self.lexer.curr_token
        self.lexer.advance()
        v = t.nud(self)
        while True:
            t = self.lexer.curr_token
            if t.lbp <= rbp:
                break
            self.lexer.advance()
            v = t.led(self, v)
        return v


def calcExpression(text):
    parser = Parser()
    parser.lexer = Lexer(text)
    parser.lexer.prepare()
    ret = parser.parse(0)
    if not isinstance(parser.lexer.curr_token, Eoi):
        raise ParseError("garbage at end")
    return ret


def testExpression(text, expected):
    try:
        r = calcExpression(text)
        if r != expected:
            print("Fail: text={!r} expected={} r={}".format(text, expected, r))
            exit(1)
    except Exception:
        print("Fail: text={!r}".format(text))
        traceback.print_exc(file = sys.stdout)
        exit(1)


def testExpressionFail(text):
    raised = False
    try:
        calcExpression(text)
    except ParseError:
        raised = True
    if not raised:
        print("Fail: not raised for: {!r}".format(text))
        exit(1)


if __name__ == "__main__":
    testExpression("0", 0)
    testExpression("+0", 0)
    testExpression("-0", 0)
    testExpression("-1", -1)
    testExpression("--1", 1)
    testExpression("++1", 1)
    testExpression("+-1", -1)
    testExpression("1+1", 2)
    testExpression("1+-1", 0)
    testExpression("3+4*5", 23)
    testExpression("3+(4*5)", 23)
    testExpression("(3+4)*5", 35)
    testExpression("(3 + 4) * 5", 35)
    testExpression("(2+3) * (7-4) + 11", 26)
    testExpression("2**2", 4)
    testExpression("-2**2", -4)
    testExpression("2**-2", 0.25)
    testExpression("-2**-2", -0.25)
    testExpression("3*3**3", 81)
    testExpression("2**2**2", 16)
    testExpression("2**3**2", 512)
    testExpressionFail("")
    testExpressionFail("(")
    testExpressionFail(")")
    testExpressionFail("2+")
    testExpressionFail("$")
    testExpressionFail("2$")
    testExpressionFail("-((2+3)")
    testExpressionFail("-(2+3))")
    testExpressionFail("2* *2")
